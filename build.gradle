plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
    id 'org.jlleitschuh.gradle.ktlint' version "11.6.0"
    id 'jacoco'
}

group = 'org.austral'
version = '2.1.1-dev.2'

// Generate build-info.properties for BuildProperties bean
springBoot {
    buildInfo()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'com.auth0:java-jwt:4.2.1'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.8'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
    testImplementation 'io.mockk:mockk:1.13.9'
    // We assume the risk introduced by the vulnerability, because of simply affecting Github's environment at worst.
    testImplementation 'org.testcontainers:junit-jupiter:1.21.0'
    testImplementation 'org.testcontainers:postgresql:1.21.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

allOpen {
    annotation 'jakarta.persistence.Entity'
    annotation 'jakarta.persistence.MappedSuperclass'
    annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
    useJUnitPlatform()
}

ktlint {
    version = "0.49.1"
    debug = true
    outputToConsole = true
    ignoreFailures = false
    filter {
        exclude "**/generated/**"
    }
}

tasks.named('ktlintFormat') {
    dependsOn 'ktlintTestSourceSetFormat'
}


jacoco {
    toolVersion = "0.8.10"
}

tasks.test {
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

tasks.jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

tasks.register("addGitHookOnBuild") {

    doLast {
        println "⚈ ⚈ ⚈ Installing Git hooks ⚈ ⚈ ⚈"
        def sourceDir = file("hooks")
        def targetDir = file(".git/hooks")

        if (!sourceDir.exists()) {
            println "⚠️  No hooks directory found at ${sourceDir.path}"
            return
        }
        if (!targetDir.exists()) {
            targetDir.mkdirs()
        }

        sourceDir.eachFile { hookFile ->
            def dest = new File(targetDir, hookFile.name)
            dest.text = hookFile.text                 // copy contents
            dest.setExecutable(true, false)           // make sure it's executable
            println "  • Installed hook: ${hookFile.name}"
        }
        println "✅ Git hooks installed!"
    }
}

tasks.named("build") {
    finalizedBy(tasks.named("addGitHookOnBuild"))
}
