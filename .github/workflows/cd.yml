name: CD

on:
    push:
        branches:
            - main
            - dev

env:
    REGISTRY: ghcr.io
    OWNER: ${{ toLower(github.repository_owner) }}
    IMAGE_NAME: ${{ endsWith(github.ref_name, '-dev') && 'libra-wallet-api-dev' || 'libra-wallet-api' }}
    JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
    release:
        name: Build, Push Docker Image & Semantic Release
        runs-on: ubuntu-latest
        permissions:
            contents: write       # for tagging, pushing commits, etc.
            pull-requests: write  # for creating PRs if needed
            packages: write       # for pushing to GHCR
            issues: write         # for semantic-release to create issues (if configured)
            id-token: write

        steps:
            - name: Checkout code (full history)
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # ——————————————————————————————————————————————
            # 1. Log in to GitHub Container Registry and build/push branch‐tagged image
            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build & push Docker image (branch tag)
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ${{ endsWith(github.ref_name, '-dev') && 'Dockerfile.dev' || 'Dockerfile.prod' }}
                  push: true
                  tags: |
                      ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

            # ——————————————————————————————————————————————
            # 2. Set up Java (if you rely on any Gradle/Java steps during release)
            - name: Set up JDK 21
              uses: actions/setup-java@v3
              with:
                  distribution: temurin
                  java-version: '21'

            # ——————————————————————————————————————————————
            # 3. Set up Node.js & install semantic-release
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 'lts/*'

            - name: Install semantic-release and plugins
              run: |
                  npm install -g semantic-release@^21.0.0 \
                    @semantic-release/changelog@^6.0.0 \
                    @semantic-release/commit-analyzer@^9.0.0 \
                    @semantic-release/exec@^6.0.0 \
                    @semantic-release/git@^10.0.0 \
                    @semantic-release/github@^8.0.0 \
                    @semantic-release/release-notes-generator@^10.0.0

            - name: Set Git user for semantic-release
              run: |
                  git config --global user.name "${{ github.actor }}"
                  git config --global user.email "${{ github.actor }}@users.noreply.github.com"

            # ——————————————————————————————————————————————
            # 4. Run semantic-release to create/update the GitHub Release
            - name: Run semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: npx semantic-release

            # ——————————————————————————————————————————————
            # 5. Capture the newly created tag (version) so we can push a version‐tagged image and upload it
            - name: Fetch tags & determine release tag
              run: |
                  git fetch --prune --unshallow || true
                  git fetch --tags origin
                  # Get the tag that points at HEAD
                  TAG=$(git tag --points-at HEAD)
                  echo "RELEASE_TAG=$TAG" >> $GITHUB_OUTPUT

            # ——————————————————————————————————————————————
            # 6. Build & push Docker image again, this time tagged with the release version
            - name: Build & push Docker image (version tag)
              run: |
                  IMAGE_FULL="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}"
                  docker build \
                    --file ${{ endsWith(github.ref_name, '-dev') && 'Dockerfile.dev' || 'Dockerfile.prod' }} \
                    --tag "$IMAGE_FULL:${{ steps.fetch-tags.outputs.RELEASE_TAG }}" \
                    .
                  docker push "$IMAGE_FULL:${{ steps.fetch-tags.outputs.RELEASE_TAG }}"

            # ——————————————————————————————————————————————
            # 7. Save the version‐tagged image as a tarball
            - name: Save Docker image to tarball
              run: |
                  IMAGE_FULL="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}"
                  IMAGE_TAG="${{ steps.fetch-tags.outputs.RELEASE_TAG }}"
                  TAR_NAME="image-${IMAGE_TAG}.tar"
                  docker pull "$IMAGE_FULL:$IMAGE_TAG"
                  docker save "$IMAGE_FULL:$IMAGE_TAG" -o "$TAR_NAME"
                  echo "TAR_PATH=$TAR_NAME" >> $GITHUB_OUTPUT

            # ——————————————————————————————————————————————
            # 8. Upload the tarball as a Release asset
            - name: Upload image tarball to GitHub Release
              run: |
                  TAG="${{ steps.fetch-tags.outputs.RELEASE_TAG }}"
                  TAR_PATH="${{ steps.save-docker.outputs.TAR_PATH }}"
                  gh release upload "$TAG" "$TAR_PATH" --clobber
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

